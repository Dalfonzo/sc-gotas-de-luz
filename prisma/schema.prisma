// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FileDb {
  id    Int    @id @default(autoincrement())
  path  String
  name  String
  url   String
  isCloud Boolean @default(true)
  news  News?
  event Event?
}

model News {
  id      Int      @id @default(autoincrement())
  title   String
  content String
  img     FileDb   @relation(fields: [imgId], references: [id])
  imgId   Int      @unique
  date    DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  start       DateTime
  end         DateTime
  img         FileDb   @relation(fields: [imgId], references: [id])
  imgId       Int      @unique
}

model Users {
  id       String @id @default(uuid())
  name     String
  lastName String
  email    String @unique
  password String
  roles    Roles  @relation(fields: [fkRole], references: [id])
  fkRole   String
}

model Roles {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  users       Users[]
  permissions Permissions[]
}

model Permissions {
  create     Boolean    @default(false)
  update     Boolean    @default(false)
  delete     Boolean    @default(false)
  read       Boolean    @default(false)
  roles      Roles?     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  resources  Resources? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@id([roleId, resourceId])
}

model Resources {
  id          String        @id @default(uuid())
  name        String
  description String?
  roles       Permissions[]
}

model Volunteer{
  id              String    @id @default(uuid())
  name            String 
  phone           String 
  email           String 
  birthDate       String 
  formReference   String?   @unique 
  isActive        Boolean   @default(false)
  date            DateTime  @default(now())
}

model Category{
  id    Int   @id @default(autoincrement())
  name  String @unique
  inventories Inventory[]
}

model Inventory{
  id              String    @id @default(uuid())
  name            String    @unique
  currentQuantity Float     @default(0)
  measure         String 
  updatedAt       DateTime  @default(now())
  category        Category  @relation(fields: [categoryId], references: [id])  
  categoryId      Int
  records         InventoryRecord[]
}

model InventoryRecord{
  id          String    @id @default(uuid())
  quantity    Float
  date        DateTime    @default(now())
  concept     String?
  inventory   Inventory   @relation(fields: [inventoryId], references: [id])
  inventoryId String 
  expirationDate DateTime?
}