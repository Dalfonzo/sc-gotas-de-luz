import { News } from '@prisma/client'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { ArticleProvider } from '~/components/client/news/article/Provider'
import UiFeedback from '~/components/common/feedback/UiFeedback'
import ClientLayout from '~/layouts/Client'
import prisma from '~/lib/db/prisma'
import { getNewsId } from '../api/admin/news/[id]'

type Props = {
  current?: News | null
  next?: News | null
  previous?: News | null
  error?: boolean
}

const NewsArticlePage = ({ current, next, previous, error }: Props) => {
  return (
    <ClientLayout>
      <Head>
        <title>{current?.title || 'Art√≠culo'} - Gotas de Luz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <UiFeedback isLoading={false} isEmpty={!current} isError={error}>
        {current && <ArticleProvider current={current} next={next?.id} previous={previous?.id} />}
      </UiFeedback>
    </ClientLayout>
  )
}

export const getServerSideProps: GetServerSideProps<Props> = async (req) => {
  const id = Number(req.params?.id)
  try {
    const current = await getNewsId(id)
    const next = await prisma.news.findFirst({ where: { id: { gt: id } }, orderBy: { id: 'asc' } })
    const previous = await prisma.news.findFirst({ where: { id: { lt: id } }, orderBy: { id: 'desc' } })
    return {
      props: { id, current, previous, next },
    }
  } catch (error) {
    return {
      props: { error: true },
    }
  }
}

export default NewsArticlePage
